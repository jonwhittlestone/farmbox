name: Continuous Integration and Delivery

on: [push]

env:
  WEB_IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/web
  NGINX_IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/nginx

jobs:
  backup_prod_db:
    name: Backup Production SQLite DB to Dropbox
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.LINODE_GITHUB_PRIVATE_KEY }}"

      - name: Run Django management command for removing online backup
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh -o StrictHostKeyChecking=no jonwhittlestone@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
            docker exec "$(docker ps | grep farmbox_web | awk '{print $1}')" /bin/sh -c "python manage.py remove_remote_db"
          ENDSSH
      - name: Run Django management command for backing up
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh -o StrictHostKeyChecking=no jonwhittlestone@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
            docker exec "$(docker ps | grep farmbox_web | awk '{print $1}')" /bin/sh -c "python manage.py backup_db"
          ENDSSH
  tests:
    name: Run Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo FARMBOX_DROPBOX_ACCESS_TOKEN=${{ secrets.FARMBOX_DROPBOX_ACCESS_TOKEN }} >> .env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
      - name: Set environment variables
        run: |
          echo "FARMBOX_DROPBOX_ACCESS_TOKEN=${{ secrets.FARMBOX_DROPBOX_ACCESS_TOKEN }}" >> $GITHUB_ENV
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f api/requirements.txt ]; then pip install -r api/requirements.txt; fi
      - name: Test with pytest
        run: |
          pytest api -v
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo FARMBOX_DROPBOX_ACCESS_TOKEN=${{ secrets.FARMBOX_DROPBOX_ACCESS_TOKEN }} >> .env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=${{ env.WEB_IMAGE }}" >> $GITHUB_ENV
          echo "NGINX_IMAGE=${{ env.NGINX_IMAGE }}" >> $GITHUB_ENV
          echo "FARMBOX_DROPBOX_ACCESS_TOKEN=${{ secrets.FARMBOX_DROPBOX_ACCESS_TOKEN }}" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
  deploy:
      name: Deploy to Linode
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Checkout branch - master
          uses: actions/checkout@v1
        - name: Add environment variables to .env
          run: |
            echo DEBUG=1 >> .env
            echo FARMBOX_DROPBOX_ACCESS_TOKEN=${{ secrets.FARMBOX_DROPBOX_ACCESS_TOKEN }} >> .env
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
            echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
            echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
        - name: Add the private SSH key to the ssh-agent
          env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          run: |
            mkdir -p ~/.ssh
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            ssh-add - <<< "${{ secrets.LINODE_GITHUB_PRIVATE_KEY }}"
        - name: Build and deploy images on Linode
          env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          run: |
            scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml jonwhittlestone@${{ secrets.LINODE_IP_ADDRESS }}:/home/jonwhittlestone/farmbox
            ssh -o StrictHostKeyChecking=no jonwhittlestone@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
              cd /home/jonwhittlestone/farmbox
              source /home/jonwhittlestone/farmbox/.env
              docker login docker.pkg.github.com -u jonwhittlestone -p {{ secrets.DEPLOY_PAT }}
              echo $WEB_IMAGE
              # echo $NGINX_IMAGE
              docker pull $WEB_IMAGE
              # docker pull $NGINX_IMAGE
              docker compose -f docker-compose.prod.yml up -d
            ENDSSH
